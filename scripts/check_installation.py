import sys

from pathlib import Path

project_root = Path(__file__).parent.parent.absolute()
sys.path.insert(0, str(project_root))

def check_import(module_name, package_name=None):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–º–ø–æ—Ä—Ç –º–æ–¥—É–ª—è."""
    package_name = package_name or module_name
    try:
        __import__(module_name)
        print(f"‚úÖ {package_name}")
        return True
    except ImportError as e:
        print(f"‚ùå {package_name}: {e}")
        return False


def main():
    print("=" * 60)
    print("–ü–†–û–í–ï–†–ö–ê –ó–ê–í–ò–°–ò–ú–û–°–¢–ï–ô TRANSNEFT AI CONSULTANT")
    print("=" * 60)

    print("\nüì¶ –ë–∞–∑–æ–≤—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    base_deps = [
        ("fastapi", "fastapi"),
        ("uvicorn", "uvicorn"),
        ("docx", "python-docx"),
        ("chromadb", "chromadb"),
        ("sklearn", "scikit-learn"),
        ("tiktoken", "tiktoken"),
        ("razdel", "razdel"),
        ("pymorphy2", "pymorphy2"),
        ("rouge_score", "rouge-score"),
    ]

    base_ok = sum(check_import(mod, pkg) for mod, pkg in base_deps)

    print(f"\nüì¶ –¢—è–∂–µ–ª—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ (optional):")
    heavy_deps = [
        ("sentence_transformers", "sentence-transformers"),
        ("transformers", "transformers"),
        ("torch", "torch"),
        ("evaluate", "evaluate"),
    ]

    heavy_ok = sum(check_import(mod, pkg) for mod, pkg in heavy_deps)

    print("\n" + "=" * 60)
    print(f"–†–ï–ó–£–õ–¨–¢–ê–¢: {base_ok}/{len(base_deps)} –±–∞–∑–æ–≤—ã—Ö, "
          f"{heavy_ok}/{len(heavy_deps)} —Ç—è–∂–µ–ª—ã—Ö")
    print("=" * 60)

    if base_ok < len(base_deps):
        print("\n‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install -e .")

    if heavy_ok < len(heavy_deps):
        print("\n‚ö†Ô∏è –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏: pip install -e \".[heavy]\"")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ config
    print("\nüîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    try:
        from src.transneft_ai_consultant.backend.config import (
            ROOT_DIR, DOCX_PATH, DB_DIR, LLM_MODEL_PATH
        )
        print(f"‚úÖ Config –∑–∞–≥—Ä—É–∂–µ–Ω")
        print(f"   ROOT_DIR: {ROOT_DIR}")
        print(f"   DOCX_PATH: {DOCX_PATH} (exists: {DOCX_PATH.exists()})")
        print(f"   DB_DIR: {DB_DIR} (exists: {DB_DIR.exists()})")
        print(f"   LLM_MODEL_PATH: {LLM_MODEL_PATH} (exists: {LLM_MODEL_PATH.exists()})")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ config: {e}")

    print("\n‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")


if __name__ == "__main__":
    main()