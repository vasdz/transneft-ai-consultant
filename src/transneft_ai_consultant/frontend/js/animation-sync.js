console.log('üéØ Advanced Animation-Sync –º–æ–¥—É–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω');

class AvatarAnimationManager {
    constructor() {
        this.avatar = null;
        this.isInitialized = false;
        this.currentState = 'idle';
        this.idleReturnTimeout = null;

        this.animationPriorities = {
            'idle': 1,
            'engagement': 2,
            'greeting': 6,
            'farewell': 5
        };
    }

    async init() {
        console.log('[üéØ AnimationManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è...');
        let attempts = 0;
        while (!window.avatarController && attempts < 30) {
            await new Promise(resolve => setTimeout(resolve, 500));
            attempts++;
        }
        if (!window.avatarController) {
            console.error('[‚ùå AnimationManager] AvatarController –Ω–µ –Ω–∞–π–¥–µ–Ω');
            return;
        }
        this.avatar = window.avatarController;
        this.isInitialized = true;
        console.log('[‚úÖ AnimationManager] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ');
        this.setupEventListeners();
    }

    setupEventListeners() {
        const textInput = document.getElementById('text-input');
        const messagesContainer = document.getElementById('messages-container');

        if (textInput) {
            textInput.addEventListener('focus', () => {
                console.log('[üéØ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞–ª—Å—è ‚Üí engagement');
                this.clearIdleReturn();
                this.playAnimationWithPriority('engagement');
            });
            
            textInput.addEventListener('input', () => {
                this.clearIdleReturn();
            });
        }

        if (messagesContainer) {
            const observer = new MutationObserver((mutations) => {
                mutations.forEach(mutation => {
                    if (mutation.addedNodes.length) {
                        mutation.addedNodes.forEach(node => {
                            if (node.nodeType === 1 && node.classList.contains('message')) {
                                this.handleNewMessage(node);
                            }
                        });
                    }
                });
            });
            observer.observe(messagesContainer, { childList: true, subtree: true });
            console.log('[‚úÖ] MutationObserver –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω');
        }

        this.setupGlobalEvents();
    }

    handleNewMessage(messageNode) {
        if (messageNode.classList.contains('user') || (messageNode.classList.contains('assistant') && !messageNode.classList.contains('welcome-message'))) {
            console.log('[üéØ] –ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ ‚Üí engagement');
            this.playAnimationWithPriority('engagement');
            this.scheduleIdleReturn(5000);
        }
    }

    setupGlobalEvents() {
        // –¢–∞–π–º–µ—Ä –¥–ª—è –≥–ª–æ–±–∞–ª—å–Ω–æ–π –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
        let inactivityTimer;
        const resetInactivityTimer = () => {
            clearTimeout(inactivityTimer);
            inactivityTimer = setTimeout(() => {
                if (this.currentState !== 'engagement') {
                    console.log('[üéØ] –î–æ–ª–≥–∞—è –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å ‚Üí idle');
                    this.playAnimationWithPriority('idle');
                }
            }, 20000);
        };
        document.addEventListener('mousemove', resetInactivityTimer);
        document.addEventListener('keypress', resetInactivityTimer);
        document.addEventListener('click', resetInactivityTimer);
        resetInactivityTimer();

        let farewellTriggered = false;

        document.addEventListener('mouseout', (e) => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫—É—Ä—Å–æ—Ä —É—à–µ–ª –∑–∞ –ø—Ä–µ–¥–µ–ª—ã —Å—Ç—Ä–∞–Ω–∏—Ü—ã –≤–≤–µ—Ä—Ö
            if (!farewellTriggered && e.clientY <= 0) {
                console.log('[üéØ] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–≤–∏–∂–µ—Ç—Å—è –∫ –∑–∞–∫—Ä—ã—Ç–∏—é –æ–∫–Ω–∞ ‚Üí farewell');
                farewellTriggered = true;
                this.playAnimationWithPriority('farewell');
                
                // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ñ–ª–∞–≥ —á–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–µ—Ä–µ–¥—É–º–∞–ª
                setTimeout(() => {
                    farewellTriggered = false;
                }, 3000);
            }
        });

        // –¢–∞–∫–∂–µ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ beforeunload –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –∑–∞–∫—Ä—ã—Ç–∏—è
        window.addEventListener('beforeunload', () => {
            console.log('[üéØ] –ó–∞–∫—Ä—ã—Ç–∏–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ‚Üí farewell');
            this.playAnimationWithPriority('farewell');
        });
    }

    playAnimationWithPriority(animationName) {
        if (!this.isInitialized || !this.avatar || !this.avatar.isLoaded) return;

        const newPriority = this.animationPriorities[animationName] || 0;
        const currentPriority = this.animationPriorities[this.currentState] || 0;

        if (newPriority < currentPriority && this.currentState !== 'idle') {
            console.log(`[üéØ] –ê–Ω–∏–º–∞—Ü–∏—è "${animationName}" –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞: –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç (${newPriority} < ${currentPriority})`);
            return;
        }

        this.clearIdleReturn();

        console.log(`[üéØ] ‚ñ∂Ô∏è –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ: ${this.currentState} ‚Üí ${animationName}`);
        try {
            this.avatar.playAnimation(animationName);
            this.currentState = animationName;
        } catch (error) {
            console.error(`[‚ùå] –û—à–∏–±–∫–∞ –≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏—è –∞–Ω–∏–º–∞—Ü–∏–∏: ${animationName}`, error);
            if (animationName !== 'idle') this.playAnimationWithPriority('idle');
        }
    }
    
    scheduleIdleReturn(delay = 3000) {
        this.clearIdleReturn();
        this.idleReturnTimeout = setTimeout(() => {
            console.log(`[üéØ] –í–æ–∑–≤—Ä–∞—Ç –≤ idle –ø–æ—Å–ª–µ ${delay}ms –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏.`);
            this.playAnimationWithPriority('idle');
        }, delay);
    }

    clearIdleReturn() {
        if (this.idleReturnTimeout) {
            clearTimeout(this.idleReturnTimeout);
            this.idleReturnTimeout = null;
        }
    }
}

const animationManager = new AvatarAnimationManager();
window.avatarAnimationManager = animationManager;
window.addEventListener('load', () => setTimeout(() => animationManager.init(), 1000));
