class VoiceInterface {
    constructor(apiBaseUrl = 'http://localhost:8000/api/voice') {
        this.apiBaseUrl = apiBaseUrl;
        this.mediaRecorder = null;
        this.audioChunks = [];
        this.isRecording = false;
        this.stream = null;
    }

    /**
     * –ó–∞–ø—Ä–æ—Å —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞
     */
    async requestMicrophoneAccess() {
        try {
            this.stream = await navigator.mediaDevices.getUserMedia({
                audio: {
                    echoCancellation: true,
                    noiseSuppression: true,
                    sampleRate: 44100
                }
            });
            console.log('‚úÖ –î–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –ø–æ–ª—É—á–µ–Ω');
            return this.stream;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É:', error);
            alert('–ù–µ–æ–±—Ö–æ–¥–∏–º –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É –¥–ª—è –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞');
            throw error;
        }
    }
    async startRecording() {
        if (this.isRecording) {
            console.warn('–ó–∞–ø–∏—Å—å —É–∂–µ –∏–¥–µ—Ç');
            return;
        }

        const stream = await this.requestMicrophoneAccess();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É MIME —Ç–∏–ø–æ–≤
        const mimeType = MediaRecorder.isTypeSupported('audio/webm')
            ? 'audio/webm'
            : 'audio/ogg';

        this.mediaRecorder = new MediaRecorder(stream, { mimeType });
        this.audioChunks = [];

        this.mediaRecorder.ondataavailable = (event) => {
            if (event.data.size > 0) {
                this.audioChunks.push(event.data);
            }
        };

        this.mediaRecorder.start();
        this.isRecording = true;

        console.log(`üé§ –ó–∞–ø–∏—Å—å –Ω–∞—á–∞—Ç–∞ (${mimeType})`);
    }

    /**
     * –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –∏ –ø–æ–ª—É—á–∏—Ç—å Blob
     */
    async stopRecording() {
        if (!this.isRecording || !this.mediaRecorder) {
            console.warn('–ó–∞–ø–∏—Å—å –Ω–µ –±—ã–ª–∞ –Ω–∞—á–∞—Ç–∞');
            return null;
        }

        return new Promise((resolve, reject) => {
            this.mediaRecorder.onstop = () => {
                const mimeType = this.mediaRecorder.mimeType;
                const audioBlob = new Blob(this.audioChunks, { type: mimeType });
                this.isRecording = false;

                // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Å–µ —Ç—Ä–µ–∫–∏
                if (this.stream) {
                    this.stream.getTracks().forEach(track => track.stop());
                }

                console.log(`üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞: ${audioBlob.size} bytes`);

                if (audioBlob.size === 0) {
                    reject(new Error('–ó–∞–ø–∏—Å—å –ø—É—Å—Ç–∞'));
                } else {
                    resolve(audioBlob);
                }
            };

            this.mediaRecorder.stop();
        });
    }

    /**
     * –†–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å –∏–∑ –∞—É–¥–∏–æ (STT)
     */
    async speechToText(audioBlob) {
        const formData = new FormData();
        formData.append('audio', audioBlob, 'recording.wav');

        try {
            const response = await fetch(`${this.apiBaseUrl}/stt`, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || `STT failed: ${response.statusText}`);
            }

            const result = await response.json();
            console.log('üìù –†–∞—Å–ø–æ–∑–Ω–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:', result.text);
            return result.text;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ STT:', error);
            throw error;
        }
    }

    /**
     * –°–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞—Ç—å —Ä–µ—á—å –∏–∑ —Ç–µ–∫—Å—Ç–∞ (TTS)
     */
    async textToSpeech(text, speaker = 'xenia') {
        try {
            const params = new URLSearchParams({
                text: text,
                speaker: speaker,
                return_file: 'false'
            });

            const response = await fetch(`${this.apiBaseUrl}/tts?${params}`, {
                method: 'POST'
            });

            if (!response.ok) {
                throw new Error(`TTS failed: ${response.statusText}`);
            }

            const result = await response.json();

            // –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64 –≤ audio
            const audioData = atob(result.audio_base64);
            const arrayBuffer = new ArrayBuffer(audioData.length);
            const view = new Uint8Array(arrayBuffer);

            for (let i = 0; i < audioData.length; i++) {
                view[i] = audioData.charCodeAt(i);
            }

            const audioBlob = new Blob([arrayBuffer], { type: 'audio/wav' });
            const audioUrl = URL.createObjectURL(audioBlob);

            console.log('üîä –ê—É–¥–∏–æ —Å–∏–Ω—Ç–µ–∑–∏—Ä–æ–≤–∞–Ω–æ');
            return audioUrl;
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ TTS:', error);
            throw error;
        }
    }

    /**
     * –ü–æ–ª–Ω—ã–π —Ü–∏–∫–ª: –≥–æ–ª–æ—Å–æ–≤–æ–π –≤–æ–ø—Ä–æ—Å -> –≥–æ–ª–æ—Å–æ–≤–æ–π –æ—Ç–≤–µ—Ç
     */
    async voiceChat(audioBlob, speaker = 'xenia') {
        const formData = new FormData();
        formData.append('audio', audioBlob, 'question.wav');

        try {
            const params = new URLSearchParams({ speaker });
            const response = await fetch(`${this.apiBaseUrl}/voice-chat?${params}`, {
                method: 'POST',
                body: formData
            });

            if (!response.ok) {
                const error = await response.json();
                throw new Error(error.detail || `Voice chat failed: ${response.statusText}`);
            }

            // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –≤–µ—Ä—Å–∏–∏ –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–æ–≤
            const question = decodeURIComponent(
                response.headers.get('X-Question-Text') || '–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å'
            );
            const answer = decodeURIComponent(
                response.headers.get('X-Answer-Text') || ''
            );

            // –ü–æ–ª—É—á–∞–µ–º –∞—É–¥–∏–æ –æ—Ç–≤–µ—Ç
            const audioBlob = await response.blob();
            const audioUrl = URL.createObjectURL(audioBlob);

            console.log('üí¨ –ì–æ–ª–æ—Å–æ–≤–æ–π —á–∞—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');

            return {
                question,
                answer,
                audioUrl
            };
        } catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ voice chat:', error);
            throw error;
        }
    }

    /**
     * –í–æ—Å–ø—Ä–æ–∏–∑–≤–µ—Å—Ç–∏ –∞—É–¥–∏–æ
     */
    playAudio(audioUrl) {
        const audio = new Audio(audioUrl);
        audio.play();
        return audio;
    }


}

window.VoiceInterface = VoiceInterface;

// –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤–æ –≤—Å–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏
const voiceInterface = new VoiceInterface();
window.voiceInterface = voiceInterface;

console.log('‚úÖ VoiceInterface –¥–æ—Å—Ç—É–ø–µ–Ω –≥–ª–æ–±–∞–ª—å–Ω–æ');
