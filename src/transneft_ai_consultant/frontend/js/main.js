import { AvatarController } from './avatar.js';
import { ChatService } from './chat.js';

console.log('üöÄ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –¢—Ä–∞–Ω—Å–Ω–µ—Ñ—Ç—å AI –ö–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç');

let avatar = null;
let chatService = null;

document.addEventListener('DOMContentLoaded', async () => {
    try {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≤–∞—Ç–∞—Ä–∞
        avatar = new AvatarController('avatar-container');
        await avatar.init();
        console.log('‚úÖ –ê–≤–∞—Ç–∞—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        // –î–µ–ª–∞–µ–º avatar –≥–ª–æ–±–∞–ª—å–Ω—ã–º –¥–ª—è animation-sync.js
        window.avatarController = avatar;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —á–∞—Ç–∞
        const chatService = new ChatService(
        'messages-container',
        'text-input',
        'send-btn',
        avatarController,
        { onAssistantMessage: (msg) => console.log('[MAIN] Assistant:', msg) }
        );
        window.chatServiceInstance = chatService;
        chatService.init();
        console.log('‚úÖ ChatService –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');

        // ========== –ì–û–õ–û–°–û–í–û–ô –í–í–û–î ==========
        const voiceBtn = document.getElementById('voice-btn');
        const voiceStatus = document.getElementById('voice-status');
        const voiceTimer = document.getElementById('voice-timer');

        if (voiceBtn && window.voiceInterface) {
            let recordingStartTime = null;
            let timerInterval = null;

            voiceBtn.addEventListener('click', async () => {
                if (!window.voiceInterface.isRecording) {
                    // ========== –ù–ê–ß–ê–õ–û –ó–ê–ü–ò–°–ò ==========
                    try {
                        await window.voiceInterface.startRecording();
                        voiceBtn.classList.add('recording');
                        if (voiceStatus) voiceStatus.textContent = '–ì–æ–≤–æ—Ä–∏—Ç–µ...';

                        // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
                        recordingStartTime = Date.now();
                        timerInterval = setInterval(() => {
                            const elapsed = Math.floor((Date.now() - recordingStartTime) / 1000);
                            const minutes = Math.floor(elapsed / 60);
                            const seconds = elapsed % 60;
                            if (voiceTimer) {
                                voiceTimer.textContent = `${minutes}:${seconds.toString().padStart(2, '0')}`;
                            }
                        }, 1000);

                        console.log('üé§ –ó–∞–ø–∏—Å—å –≥–æ–ª–æ—Å–∞ –Ω–∞—á–∞—Ç–∞');
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –Ω–∞—á–∞–ª–∞ –∑–∞–ø–∏—Å–∏:', error);
                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—á–∞—Ç—å –∑–∞–ø–∏—Å—å. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –º–∏–∫—Ä–æ—Ñ–æ–Ω—É.');
                    }
                } else {
                    // ========== –û–°–¢–ê–ù–û–í–ö–ê –ó–ê–ü–ò–°–ò ==========
                    try {
                        const audioBlob = await window.voiceInterface.stopRecording();
                        voiceBtn.classList.remove('recording');
                        if (voiceStatus) voiceStatus.textContent = '–û–±—Ä–∞–±–æ—Ç–∫–∞...';

                        // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–µ—Ä
                        clearInterval(timerInterval);
                        if (voiceTimer) voiceTimer.textContent = '0:00';

                        console.log('üõë –ó–∞–ø–∏—Å—å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º...');

                        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ
                        const recognizedText = await window.voiceInterface.speechToText(audioBlob);

                        if (recognizedText && recognizedText.trim()) {
                            // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –≤ –ø–æ–ª–µ –≤–≤–æ–¥–∞
                            const textInput = document.getElementById('text-input');
                            if (textInput) {
                                textInput.value = recognizedText;
                                console.log('üìù –¢–µ–∫—Å—Ç —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω:', recognizedText);
                            }

                            // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                            if (chatService) {
                                await chatService.sendMessage();
                            }
                        } else {
                            alert('–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å —Ä–µ—á—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.');
                        }

                        if (voiceStatus) voiceStatus.textContent = '';
                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø–∏—Å–∏:', error);
                        alert('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–∞: ' + error.message);
                        voiceBtn.classList.remove('recording');
                        if (voiceStatus) voiceStatus.textContent = '';
                        if (voiceTimer) voiceTimer.textContent = '0:00';
                        clearInterval(timerInterval);
                    }
                }
            });

            console.log('‚úÖ –ì–æ–ª–æ—Å–æ–≤–æ–π –≤–≤–æ–¥ –ø–æ–¥–∫–ª—é—á–µ–Ω');
        } else {
            console.warn('‚ö†Ô∏è –ö–Ω–æ–ø–∫–∞ –º–∏–∫—Ä–æ—Ñ–æ–Ω–∞ –∏–ª–∏ VoiceInterface –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
        }

        // ========== –ö–ù–û–ü–ö–ê –ü–†–ò–í–ï–¢–°–¢–í–ò–Ø ==========
        const welcomeBtn = document.getElementById('welcome-audio-btn');
        if (welcomeBtn) {
            const welcomeMessageElement = welcomeBtn.closest('.message-content')?.querySelector('p');
            const welcomeText = welcomeMessageElement ? welcomeMessageElement.textContent.trim() : '';
            const apiUrl = chatService.apiUrl;

            if (welcomeText && apiUrl) {
                welcomeBtn.addEventListener('click', async () => {
                    console.log('üîä –ö–ª–∏–∫ –ø–æ –∫–Ω–æ–ø–∫–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è. –¢–µ–∫—Å—Ç:', welcomeText);
                    try {
                        welcomeBtn.disabled = true;
                        welcomeBtn.style.opacity = '0.5';
                        const ttsUrl = `${apiUrl}/api/voice/tts?text=${encodeURIComponent(welcomeText)}&speaker=xenia&return_file=true`;
                        const response = await fetch(ttsUrl, {
                            method: 'POST',
                            headers: { 'Accept': 'audio/wav' }
                        });
                        if (!response.ok) throw new Error(`–û—à–∏–±–∫–∞ TTS: ${response.status}`);

                        const blob = await response.blob();
                        const audioUrl = URL.createObjectURL(blob);
                        const audio = new Audio(audioUrl);

                        audio.onended = () => {
                            URL.revokeObjectURL(audioUrl);
                            welcomeBtn.disabled = false;
                            welcomeBtn.style.opacity = '1';
                        };
                        await audio.play();

                    } catch (error) {
                        console.error('‚ùå –û—à–∏–±–∫–∞ –æ–∑–≤—É—á–∏–≤–∞–Ω–∏—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è:', error);
                        alert('–ù–µ —É–¥–∞–ª–æ—Å—å –æ–∑–≤—É—á–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ. ' + error.message);
                        welcomeBtn.disabled = false;
                        welcomeBtn.style.opacity = '1';
                    }
                });
                console.log('‚úÖ –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.');
            }
        }

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–∞ –æ–∫–Ω–∞
        window.addEventListener('resize', () => {
            if (avatar) avatar.resize();
        });

        console.log('‚úÖ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞');
    } catch (error) {
        console.error('‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
    }
});
